name: "Ruby on Rails CI"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rails_test
    env:
      RAILS_ENV: test
      DATABASE_URL: "postgres://postgres:password@localhost:5432/rails_test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Ruby and dependencies
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@78c01b705fd9d5ad960d432d3a0cfa341d50e410 # v1.179.1
        with:
          bundler-cache: true

      # Set up database schema using docker-compose
      - name: Set up database schema
        run: |
          docker-compose -f docker-compose.yml run --rm backend bundle exec rails db:create
          docker-compose -f docker-compose.yml run --rm backend bundle exec rails db:schema:load

      # Run tests using docker-compose
      - name: Run tests
        run: docker-compose -f docker-compose.yml run --rm backend bundle exec rails test

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Ruby and gems
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@78c01b705fd9d5ad960d432d3a0cfa341d50e410 # v1.179.1
        with:
          bundler-cache: true

      # Generate binstubs for tools
      - name: Generate binstubs
        run: |
          docker-compose -f docker-compose.yml run --rm backend bundle binstubs bundler-audit brakeman rubocop

      # Security audit dependencies
      - name: Security audit dependencies
        run: docker-compose -f docker-compose.yml run --rm backend bundle exec bundle audit --update

      # Security audit application code
      - name: Security audit application code
        run: docker-compose -f docker-compose.yml run --rm backend bundle exec brakeman -q -w2

      # Lint Ruby files
      - name: Lint Ruby files
        run: docker-compose -f docker-compose.yml run --rm backend bundle exec rubocop --parallel
